<template>
    <div class="hor-page">
        <title-bar title="重力" show-back="{{true}}" show-right="{{true}}"></title-bar>
        <div class="body" onresize="resize">

            <div show="aimvaild" class="aim {{aimvalue>=0?'aim-add':'aim-sub'}}" style="left:{{aimleft}}px;top:{{aimtop}}px;width:{{aimw}}px;height:{{aimh}}px;"></div>
            <div class="hero" style="left:{{left}}px;top:{{top}}px;width:{{hw}}px;height:{{hh}}px;"></div>
            <div class="head">
                <text>当前分数:{{score}}</text>
                <text>倒计时：{{aimvalue}}秒</text>
            </div>

        </div>

    </div>

</template>
<import name="title-bar" src="../../components/common/bar/title-bar"></import>

<style lang="less">
@import "../../assets/styles/self.less";
.body {
  width: 100%;
  height: 90%;
  background-color: #ffffff;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
}
.hero {
  position: absolute;
  border-radius: 50%;
  background-image: url("../../assets/images/huaji.png");
}

.aim {
  position: absolute;
  border-radius: 50%;
  justify-content: center;
  align-items: center;
}
.aim-add {
  background-image: url("../../assets/images/haha.png");
}
.aim-sub {
  background-image: url("../../assets/images/ku.png");
}

.head {
  width: 100%;
  padding: 5px 15px 0px 15px;
  justify-content: space-between;
  text {
    font-size: 50px;
    color: #495060;
  }
}
</style>

<script>
import prompt from '@system.prompt'
import router from '@system.router'
import sensor from '@system.sensor'

function distance(x, y, cx, cy, r) {
    if (Math.pow(x - cx, 2) + Math.pow(y - cy, 2) <= Math.pow(r, 2))
        return true;
    else
        return false;
}



export default {
    private: {
        left: 100,
        top: 100,
        vx: 0,
        vy: 0,
        ax: 0,
        ay: 0,
        width: 800,
        heigh: 800,
        hw: 100,
        hh: 100,
        interval: 20,
        ela: 0.9,
        score: 0,

        aimvaild: true,
        aimvalue: -1,
        aimleft: 0,
        aimtop: 0,
        aimsize: 0,
        aimw: 50,
        aimh: 50

    },
    onShow() {
        sensor.subscribeAccelerometer({
            callback: function (ret) {
                self.ax = ret.y / 50
                self.ay = ret.x / 50
            }
        })
        const self = this
        setInterval(() => {
            if (self.aimvaild == false || self.aimvalue <= -2) {
                self.aimleft = Math.random() * (self.width - self.aimw)
                self.aimtop = Math.random() * (self.heigh - self.aimh)
                self.aimvalue = 3
                self.aimvaild = true
            }
            else {
                self.aimvalue--
            }
        }, 1000);
        setInterval(() => {
            console.log(self.vx, self.vy, self.ax, self.ay, self.left, self.top)
            let x = self.vx + 0.5 * self.ax * self.interval * self.interval
            let y = self.vy + 0.5 * self.ay * self.interval * self.interval
            self.vx = self.vx + self.ax * self.interval
            self.vy = self.vy + self.ay * self.interval
            if (self.aimvaild && distance(self.left + self.hw / 2, self.top + self.hh / 2, self.aimleft + self.aimw / 2, self.aimtop + self.aimh / 2, (self.hw + self.aimw) / 2)) {
                if (self.aimvalue > 0) {
                    self.hw = (self.hw + 10) > 250 ? 250 : self.hw + 10
                    self.hh = self.hw
                }
                else if (self.aimvalue > 0) {
                    self.hw = (self.hw - 10) < 20 ? 20 : self.hw - 10
                    self.hh = self.hw
                }
                self.score += self.aimvalue * 10
                self.aimvaild = false
            }

            if (self.left + x <= 0) {
                self.left = 0
                self.vx = -self.vx * self.ela;
            }
            else if (self.left + x + self.hw >= self.width) {
                self.left = self.width - self.hw
                self.vx = -self.vx * self.ela;
            }
            else {
                self.left = self.left + x;
            }

            if (self.top + y <= 0) {
                self.top = 0
                self.vy = -self.vy * self.ela;
            }
            else if (self.top + y + self.hh >= self.heigh) {
                self.top = self.heigh - self.hh
                self.vy = -self.vy * self.ela;
            }
            else {
                self.top = self.top + y;
            }





        }, self.interval * 3);
    },
    resize(e) {
        console.log(e)
        this.width = e.offsetWidth
        this.heigh = e.offsetHeight
        this.aimleft = Math.random() * (this.width - this.aimw)
        this.aimtop = Math.random() * (this.heigh - this.aimh)
        console.log(this.aimleft, this.aimtop)
        this.left = (this.width - this.hw) / 2
        this.top = (this.heigh - this.hh) / 2
    }

};
</script>