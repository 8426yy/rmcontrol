<template>
  <div class="main">

    <div class="left">
      <div id="body" class="body" onresize="getOffset" @click="click" @touchstart="movestart" @touchmove="moving" @touchend="movend">
      </div>
      <div class="top">
        <div class="top-left">
          <div class="left-1" @click="click('left')">
          </div>
          <div class="left-2" id="{{left?'left-2':'l'}}" @click="press('left')">
          </div>
        </div>
        <div class="top-right">
          <div class="right-1" id="{{right?'right-1':'r'}}" @click="press('right')">

          </div>
          <div class="right-2" @click="click('right')">

          </div>
        </div>
      </div>
    </div>
    <div class="right">
      <div class="right-top">
        <div class="middle" id="{{middle?'middle':'m'}}" @click="press('middle')">
           <my-icon type="finger-print" color="#ffffff" size="40" ></my-icon>
        </div>
        <div class="middle">
          <my-icon type="settings" color="#ffffff" size="40" @click="optionchange"></my-icon>
        </div>

      </div>
      <div class="right-down" @swipe="swipe">

      </div>
    </div>
    <div show="{{option}}" class="option">
      <div class="option-line">
        <text class="label">鼠标速率</text>
        <slider class="slider" min="1" max="20" step="1" value="{{rate}}" onchange="getValue('rate')"></slider>
        <text class="label">{{rate}}</text>
      </div>
      <div class="option-line">
        <text class="label">输入间隔</text>
        <slider class="slider" min="2" max="20" step="1" value="{{interval}}" onchange="getValue('interval')"></slider>
        <text class="label">{{interval}}</text>
      </div>
      <div class="option-line">
        <text class="label">滚轮速率</text>
        <slider class="slider" min="50" max="1000" step="50" value="{{scrollrate}}" onchange="getValue('scrollrate')"></slider>
        <text class="label">{{scrollrate}}</text>
      </div>
      <div class="option-line">
        <div>
          <text class="label">定位模式</text>
          <switch checked="{{mode}}" onchange="modechange" />
          <text class="label">{{mode?'相对滑动':'比例映射'}}</text>
        </div>

        <input class="option-button" type="button" value="恢复默认" @click="normal"></input>
        <input class="option-button" type="button" value="鼠标复位" @click="reset"></input>
      </div>

    </div>
  </div>
</template>
<import name="my-icon" src="apex-ui/components/icon/index"></import>
 
<style lang="less">
.main {
  padding: 5px;
  margin: 5px;
  justify-content: center;
  border: 10px solid #2d8cf0;
  background-color: white;
}
.top {
  width: 100%;
  height: 15%;
  background-color: #2d8cf0;
}
.top-left {
  width: 50%;
  height: 100%;
}
.top-right {
  width: 50%;
  height: 100%;
}
.left {
  width: 85%;
  height: 100%;
  border: 5px solid #2d8cf0;
  flex-direction: column;
}
.right {
  width: 15%;
  height: 100%;
  border: 5px solid #2d8cf0;
  flex-direction: column;
}
.right-top {
  height: 15%;
  margin: 2px;
    background-color: #2d8cf0;
  justify-content: flex-end;
}
.right-down {
  height: 85%;
  border-top: 5px solid #2d8cf0;
}
.body {
  
  justify-content: flex-start;
  align-items: flex-start;
  height: 85%;
    border-bottom: 5px solid #2d8cf0;
}


.option {
  position: absolute;
  bottom: 100px;
  left: 10%;
  width: 80%;
  height: 80%;
  background-color: #2d8cf0;
  padding: 20px;
  flex-direction: column;
  align-items: center;
}

.option-line {
  width: 90%;
  height: 100px;
  padding: 5px;
  margin: 5px;
}

.slider {
  width: 70%;
  selected-color: #00ffdd;
  block-color: #ffffff;
}
.label {
  font-size: 35px;
  color: #ffffff;
}

.left-1 {
  width: 75%;
  background-color: #ffffff;
  border-right: 4px solid #2d8cf0;

}
.left-2 {
  width: 25%;
  border: 4px solid #ffffff;
  
}

.right-1 {
  width: 25%;
  border: 4px solid #ffffff;
}
.right-2 {
  width: 75%;
  border-left: 4px solid #2d8cf0;
    background-color: #ffffff;
}

#left-2 {
  background-color: #19be6b;
}
#right-1 {
  background-color: #19be6b;
}
.left-1:active {
   border: 4px solid #ffffff;
  background-color: #19be6b;
}
.right-2:active {
   border: 4px solid #ffffff;
  background-color: #19be6b;
}
.middle
{
  width: 50%;
  border: 2px solid #ffffff;
  justify-content: center;
  align-items: center;
}

#middle
{
   background-color: #19be6b;
    //background-color: #064900;
  
}

#option
{
  background-color: #ffffff;
}
.option-button
{
  width: 200px;
  margin-left:  30px;
  height: 75px;
  background-color: #ffffff;
  color:#2d8cf0;
}

switch {
  thumb-color: #ffffff;
  track-color: rgb(233, 237, 241);
  margin-right: 20px;
}
</style>

<script>

export default {
  data: {
    last: null,
    interval: 3,
    times: 0,
    rate: 3,
    option: false,
    mode: true,
    width: 400,
    height: 300,
    left: false,
    right: false,
    middle:false,
    scrollrate: 400
  },
  click(x, e) {
    $socket.send({
      'kind': 'p',
      'data': {
        'button': x,
        'operate': 'click'
      }
    })
  },
  press(x, e) {
    if (this[x])
      $socket.send({
        'kind': 'p',
        'data': {
          'button': x,
          'operate': 'reserve'
        }
      })
    else
      $socket.send({
        'kind': 'p',
        'data': {
          'button': x,
          'operate': 'press'
        }
      })
    this[x] = !this[x]
    //console.log(this[x])
  },
  movestart(e) {
    if (e.changedTouches[0].identifier == 0) {
      this.last = {
        'x': e.changedTouches[0].offsetX,
        'y': e.changedTouches[0].offsetY,
        'time': e.timeStamp
      }
      this.times = 0
      if (!this.mode) {
        let change = {
          'x': (e.changedTouches[0].offsetX / this.width).toFixed(2),
          'y': (e.changedTouches[0].offsetY / this.height).toFixed(2),
          'time': 0,
        }
        $socket.send({
          'kind': 't',
          'data': change
        })

      }
      //console.log(this.last)
    }
    ////console.log('touch start', e)
  },
  moving(e) {
    if (e.changedTouches[0].identifier == 0) {
      if (this.times >= this.interval) {
        if (this.mode) {
          let change = {
            'x': (e.changedTouches[0].offsetX - this.last.x) * this.rate * 0.5,
            'y': (e.changedTouches[0].offsetY - this.last.y) * this.rate * 0.5,
            'time': e.timeStamp - this.last.time,
          }
          $socket.send({
            'kind': 'm',
            'data': change
          })

        }
        else {
          let change = {
            'x': (e.changedTouches[0].offsetX / this.width).toFixed(2),
            'y': (e.changedTouches[0].offsetY / this.height).toFixed(2),
            'time': e.timeStamp - this.last.time,
          }
          $socket.send({
            'kind': 't',
            'data': change
          })
        }
        this.last = {
          'x': e.changedTouches[0].offsetX,
          'y': e.changedTouches[0].offsetY,
          'time': e.timeStamp
        }
        this.times = 0
      }
      else {
        this.times++
      }

    }
    //console.log('touch move', e)
  },
  movend(e) {
    if (e.changedTouches[0].identifier == 0) {
      if (this.mode) {
        let change = {
          'x': (e.changedTouches[0].offsetX - this.last.x) * this.rate * 0.5,
          'y': (e.changedTouches[0].offsetY - this.last.y) * this.rate * 0.5,
          'time': e.timeStamp - this.last.time,
          'rate': this.rate
        }
        $socket.send({
          'kind': 'm',
          'data': change
        })

      } else {
        let change = {
          'x': (e.changedTouches[0].offsetX / this.width).toFixed(2),
          'y': (e.changedTouches[0].offsetY / this.height).toFixed(2),
          'time': e.timeStamp - this.last.time,
        }
        $socket.send({
          'kind': 't',
          'data': change
        })

      }
      this.times = 0
    }

    //console.log('touch end', e)
  },
  optionchange() {
    this.option = !this.option
  },
  modechange(e) {
    this.mode = e.checked
  },
  getValue(name, evt) {
    this[name] = evt.progress
  },
  getOffset(e) {
    this.width = e.offsetWidth
    this.height = e.offsetHeight
    //console.log(this.width, this.height)
  },
  swipe(e) {
    let dis = 0
    switch (e.direction) {
      case "up": dis = 1; break;
      case "left": break;
      case "down": dis = -1; break;
      case "right": break;
      default: break;
    }
    $socket.send({
      'kind': 'p',
      'data': {
        'button': dis * this.scrollrate,
        'operate': 'scroll'
      }
    })
    //console.log(e)
  },
  reset() {
    $socket.send({
      'kind': 'p',
      'data': {
        'button': 'mouse reset',
        'operate': 'reset'
      }
    })
  },
  normal() {
      this.interval = 3,
      this.times = 0,
      this.rate = 3,
      this.mode = true,
      this.left = false,
      this.right = false,
      this.scrollrate = 400
      this.middle=false
  }

};
</script>