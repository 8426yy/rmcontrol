<script>
import { $utils, $apis,$global,$device,$socket} from './helper'
const hook2global = global.__proto__ || global
hook2global.$apis = $apis
hook2global.$utils = $utils
hook2global.$global=$global
hook2global.$device=$device
hook2global.$socket=$socket
hook2global.regeneratorRuntime = require('@babel/runtime/regenerator')

var devdata={
  'name':'',
  'id':'',
  'vaild':false,
  'service':'',
  'character':''
}

$global.setGlobalData('devdata',devdata)

export default {
  showMenu: $utils.showMenu,
  createShortcut: $utils.createShortcut,

  onCreate() {
    Date.prototype.format = function (format) {
      var o = {
        "M+": this.getMonth() + 1, //month
        "d+": this.getDate(), //day
        "h+": this.getHours(), //hour
        "m+": this.getMinutes(), //minute
        "s+": this.getSeconds(), //second
        "q+": Math.floor((this.getMonth() + 3) / 3), //quarter
        "S": this.getMilliseconds() //millisecond
      }
      if (/(y+)/.test(format)) {
        format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
      }
      for (var k in o) {
        if (new RegExp("(" + k + ")").test(format)) {
          format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
        }
      }
      return format;
    }
    Function.prototype.bindPage = function (vmInst) {
      const fn = this
      return function () {
        if (!vmInst) {
          throw new Error(`使用错误：请传递VM对象`)
        }
        if (vmInst.$valid) {
          return fn.apply(vmInst, arguments)
        } else {
          console.info(`页面销毁时，不执行回调函数`)
        }
      }
    }
    const rawParse = JSON.parse
    JSON.parse = function (str, defaults) {
      try {
        return rawParse(str)
      } catch (err) {
        console.error(`JSON解析失败：${str}, ${err.stack}`)
        return defaults
      }
    }

  },
  onDestroy() {
      $socket.close()
  },
}
</script>